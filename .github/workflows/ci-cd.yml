name: Anthias SaaS CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '22'
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'

jobs:
  # Security and Vulnerability Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Backend Testing and Quality
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_signate
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev gettext

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        working-directory: ./project/backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt
          pip install -r requirements/requirements.dev.txt
          pip install coverage pytest-django pytest-cov

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_signate" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
          echo "DEBUG=True" >> $GITHUB_ENV
          echo "ENVIRONMENT=test" >> $GITHUB_ENV

      - name: Run database migrations
        working-directory: ./project/backend
        run: |
          python manage.py migrate --settings=anthias_app.settings.test

      - name: Run linting
        working-directory: ./project/backend
        run: |
          flake8 . --max-line-length=88 --extend-ignore=E203,W503
          black . --check --diff
          isort . --check-only --diff

      - name: Run security checks
        working-directory: ./project/backend
        run: |
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Run Django tests with coverage
        working-directory: ./project/backend
        run: |
          coverage run --source='.' manage.py test --settings=anthias_app.settings.test --verbosity=2
          coverage xml
          coverage report --fail-under=80

      - name: Upload backend test coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./project/backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Testing and Quality
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Run Prettier check
        working-directory: ./frontend
        run: npm run format:check

      - name: Run TypeScript check
        working-directory: ./frontend
        run: npm run type-check

      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Run E2E tests
        working-directory: ./frontend
        run: |
          npm run build
          npm run test:e2e:headless

      - name: Upload frontend test coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Build and Push Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, backend-test, frontend-test]
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        component: [server, websocket, celery, nginx, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Get Git information
        id: git-info
        run: |
          echo "git_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "git_short_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "git_branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component == 'frontend' && './frontend' || './project/backend' }}
          file: ${{ matrix.component == 'frontend' && './frontend/docker/Dockerfile.production' || format('./project/backend/docker/Dockerfile.{0}', matrix.component) }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DEBIAN_VERSION=bookworm
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            NODE_VERSION=${{ env.NODE_VERSION }}
            NGINX_VERSION=alpine
            BUILD_DATE=${{ steps.git-info.outputs.build_date }}
            GIT_HASH=${{ steps.git-info.outputs.git_hash }}
            GIT_SHORT_HASH=${{ steps.git-info.outputs.git_short_hash }}
            GIT_BRANCH=${{ steps.git-info.outputs.git_branch }}
            BUILD_NUMBER=${{ github.run_number }}

  # Database Migration Testing
  migration-test:
    name: Database Migration Test
    runs-on: ubuntu-latest
    needs: [backend-test]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: migration_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: ./project/backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt

      - name: Test fresh database migration
        working-directory: ./project/backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/migration_test
          SECRET_KEY: test-migration-key
        run: |
          python manage.py migrate --settings=anthias_app.settings.test
          python manage.py check --deploy --settings=anthias_app.settings.production

      - name: Test migration rollback
        working-directory: ./project/backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/migration_test
          SECRET_KEY: test-migration-key
        run: |
          python manage.py showmigrations --settings=anthias_app.settings.test

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, migration-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment:
      name: staging
      url: https://staging.signate.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/signate

            # Create .env file for staging
            cat > .env.staging << EOF
            ENVIRONMENT=staging
            DEBUG=false
            SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}
            ALLOWED_HOSTS=staging.signate.com,localhost

            # Database
            DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}

            # Redis
            REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
            CELERY_BROKER_URL=${{ secrets.STAGING_REDIS_URL }}/0
            CELERY_RESULT_BACKEND=${{ secrets.STAGING_REDIS_URL }}/1

            # SSL
            SECURE_SSL_REDIRECT=true
            SECURE_HSTS_SECONDS=31536000
            SESSION_COOKIE_SECURE=true
            CSRF_COOKIE_SECURE=true

            # Image tags
            IMAGE_TAG=develop-${{ github.sha }}

            # Build info
            GIT_HASH=${{ github.sha }}
            GIT_BRANCH=develop
            BUILD_NUMBER=${{ github.run_number }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            EOF

            # Pull latest images
            docker-compose -f docker-compose.staging.yml --env-file .env.staging pull

            # Run database migrations
            docker-compose -f docker-compose.staging.yml --env-file .env.staging run --rm anthias-server python manage.py migrate

            # Deploy with zero-downtime
            docker-compose -f docker-compose.staging.yml --env-file .env.staging up -d --remove-orphans

            # Health check
            sleep 30
            curl -f https://staging.signate.com/health || exit 1

      - name: Run staging tests
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/signate

            # Run smoke tests
            docker-compose -f docker-compose.staging.yml --env-file .env.staging exec -T anthias-server python manage.py test anthias_app.tests.smoke_tests

            # Check all services are healthy
            docker-compose -f docker-compose.staging.yml --env-file .env.staging ps | grep -q "Up (healthy)" || exit 1

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://signate.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production servers
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/signate

            # Create backup before deployment
            ./scripts/backup-production.sh

            # Create .env file for production
            cat > .env.production << EOF
            ENVIRONMENT=production
            DEBUG=false
            SECRET_KEY=${{ secrets.PRODUCTION_SECRET_KEY }}
            ALLOWED_HOSTS=${{ secrets.PRODUCTION_ALLOWED_HOSTS }}

            # Database
            DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}

            # Redis
            REDIS_URL=${{ secrets.PRODUCTION_REDIS_URL }}
            CELERY_BROKER_URL=${{ secrets.PRODUCTION_REDIS_URL }}/0
            CELERY_RESULT_BACKEND=${{ secrets.PRODUCTION_REDIS_URL }}/1

            # SSL
            SECURE_SSL_REDIRECT=true
            SECURE_HSTS_SECONDS=31536000
            SESSION_COOKIE_SECURE=true
            CSRF_COOKIE_SECURE=true

            # SSL Certificates
            SSL_DOMAINS=${{ secrets.SSL_DOMAINS }}
            SSL_EMAIL=${{ secrets.SSL_EMAIL }}

            # Image tags
            IMAGE_TAG=main-${{ github.sha }}

            # Build info
            GIT_HASH=${{ github.sha }}
            GIT_BRANCH=main
            BUILD_NUMBER=${{ github.run_number }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            EOF

            # Blue-green deployment strategy
            ./scripts/deploy-production.sh .env.production

      - name: Run production health checks
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/signate

            # Wait for services to start
            sleep 60

            # Comprehensive health checks
            ./scripts/health-check.sh

            # Send deployment notification
            curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
              -H 'Content-type: application/json' \
              --data '{"text":"🚀 Production deployment successful for commit ${{ github.sha }}"}'

  # Performance Testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run load tests
        run: |
          # Install k6
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

          # Run performance tests against staging
          k6 run tests/performance/load-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: tests/performance/results/

# Cleanup old packages
  cleanup:
    name: Cleanup Old Packages
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Delete old package versions
        uses: actions/delete-package-versions@v5
        with:
          package-name: '${{ env.IMAGE_NAME }}-server'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: 'true'