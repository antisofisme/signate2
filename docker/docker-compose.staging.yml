# Anthias SaaS Platform - Staging Environment Configuration
# Staging environment for testing before production deployment

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: signate-postgres-staging
    hostname: signate-postgres-staging
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-signate_staging}
      - POSTGRES_USER=${POSTGRES_USER:-signate}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-staging-data:/var/lib/postgresql/data
    networks:
      - signate-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-signate} -d ${POSTGRES_DB:-signate_staging}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: signate-redis-staging
    hostname: signate-redis-staging
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-staging-data:/data
    networks:
      - signate-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Main Django Application Server
  anthias-server:
    build:
      context: ../project/backend
      dockerfile: docker/Dockerfile.server
      args:
        - DEBIAN_VERSION=${DEBIAN_VERSION:-bookworm}
        - PYTHON_VERSION=${PYTHON_VERSION:-3.11}
        - NODE_VERSION=${NODE_VERSION:-22}
    image: signate/anthias-server:${IMAGE_TAG:-staging}
    container_name: signate-server-staging
    hostname: signate-server-staging
    environment:
      - HOME=/data
      - LISTEN=${LISTEN_HOST:-0.0.0.0}
      - PORT=${LISTEN_PORT:-8000}
      - ENVIRONMENT=staging
      - DEBUG=${DEBUG:-false}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - DJANGO_SETTINGS_MODULE=anthias_app.settings.staging
    ports:
      - "9000:8000"
    volumes:
      - anthias-staging-data:/data
      - static-staging-files:/data/static
      - media-staging-files:/data/media
    networks:
      - signate-backend
      - signate-frontend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "manage.py", "health_check"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WebSocket Service
  anthias-websocket:
    build:
      context: ../project/backend
      dockerfile: docker/Dockerfile.websocket
    image: signate/anthias-websocket:${IMAGE_TAG:-staging}
    container_name: signate-websocket-staging
    hostname: signate-websocket-staging
    environment:
      - HOME=/data
      - LISTEN=${LISTEN_HOST:-0.0.0.0}
      - PORT=9001
      - REDIS_URL=${REDIS_URL}
      - ENVIRONMENT=staging
    volumes:
      - anthias-staging-data:/data
    networks:
      - signate-backend
    depends_on:
      - anthias-server
      - redis
    restart: unless-stopped

  # Celery Worker
  anthias-celery:
    build:
      context: ../project/backend
      dockerfile: docker/Dockerfile.celery
    image: signate/anthias-celery:${IMAGE_TAG:-staging}
    container_name: signate-celery-staging
    hostname: signate-celery-staging
    environment:
      - HOME=/data
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-2}
      - ENVIRONMENT=staging
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - anthias-staging-data:/data
    networks:
      - signate-backend
    depends_on:
      - anthias-server
      - redis
    restart: unless-stopped

  # Frontend Application
  anthias-frontend:
    build:
      context: ../frontend
      dockerfile: docker/Dockerfile.production
      args:
        - NODE_VERSION=${NODE_VERSION:-22}
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
    image: signate/anthias-frontend:${IMAGE_TAG:-staging}
    container_name: signate-frontend-staging
    hostname: signate-frontend-staging
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
    networks:
      - signate-frontend
    restart: unless-stopped

  # Nginx Reverse Proxy
  anthias-nginx:
    build:
      context: ../project/backend
      dockerfile: docker/Dockerfile.nginx
    image: signate/anthias-nginx:${IMAGE_TAG:-staging}
    container_name: signate-nginx-staging
    hostname: signate-nginx-staging
    environment:
      - NGINX_HOST=${NGINX_HOST:-localhost}
      - NGINX_PORT=${NGINX_PORT:-80}
      - SERVER_NAME=${SERVER_NAME:-staging.signate.com}
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - anthias-staging-data:/data:ro
      - static-staging-files:/data/static:ro
      - media-staging-files:/data/media:ro
      - ./config/nginx/staging.conf:/etc/nginx/nginx.conf:ro
    networks:
      - signate-frontend
    depends_on:
      - anthias-server
      - anthias-frontend
    restart: unless-stopped

networks:
  signate-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
  signate-backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.23.0.0/16

volumes:
  postgres-staging-data:
    driver: local
  redis-staging-data:
    driver: local
  anthias-staging-data:
    driver: local
  static-staging-files:
    driver: local
  media-staging-files:
    driver: local