# Anthias SaaS Platform - Production Deployment Configuration
# Zero-downtime deployment with rolling updates and SSL/TLS termination

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: signate-postgres
    hostname: signate-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-signate_production}
      - POSTGRES_USER=${POSTGRES_USER:-signate}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./scripts/postgres-backup.sh:/usr/local/bin/backup.sh:ro
    networks:
      - signate-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-signate} -d ${POSTGRES_DB:-signate_production}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    sysctls:
      - net.core.somaxconn=1024
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: signate-redis
    hostname: signate-redis
    command: >
      redis-server
      --appendonly yes
      --maxmemory ${REDIS_MAX_MEMORY:-1gb}
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --tcp-backlog 511
      --save 900 1
      --save 300 10
      --save 60 10000
    environment:
      - REDIS_REPLICATION_MODE=master
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - signate-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    sysctls:
      - net.core.somaxconn=1024

  # Main Django Application Server
  anthias-server:
    build:
      context: ../project/backend
      dockerfile: docker/Dockerfile.server
      args:
        - DEBIAN_VERSION=${DEBIAN_VERSION:-bookworm}
        - PYTHON_VERSION=${PYTHON_VERSION:-3.11}
        - NODE_VERSION=${NODE_VERSION:-22}
        - BUILD_DATE=${BUILD_DATE}
        - GIT_HASH=${GIT_HASH}
        - GIT_BRANCH=${GIT_BRANCH}
    image: signate/anthias-server:${IMAGE_TAG:-latest}
    container_name: signate-server
    hostname: signate-server
    environment:
      # Core Configuration
      - HOME=/data
      - LISTEN=${LISTEN_HOST:-0.0.0.0}
      - PORT=${LISTEN_PORT:-8000}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}

      # Database Configuration
      - DATABASE_URL=${DATABASE_URL}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-20}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-10}

      # Redis Configuration
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}

      # Security Settings
      - SECURE_SSL_REDIRECT=${SECURE_SSL_REDIRECT:-true}
      - SECURE_HSTS_SECONDS=${SECURE_HSTS_SECONDS:-31536000}
      - SECURE_HSTS_INCLUDE_SUBDOMAINS=${SECURE_HSTS_INCLUDE_SUBDOMAINS:-true}
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE:-true}
      - CSRF_COOKIE_SECURE=${CSRF_COOKIE_SECURE:-true}

      # Git Information
      - GIT_HASH=${GIT_HASH:-unknown}
      - GIT_SHORT_HASH=${GIT_SHORT_HASH:-unknown}
      - GIT_BRANCH=${GIT_BRANCH:-main}
      - BUILD_NUMBER=${BUILD_NUMBER:-0}
      - BUILD_DATE=${BUILD_DATE}

      # Django Settings
      - DJANGO_SETTINGS_MODULE=anthias_app.settings.production

      # Multi-tenant Settings
      - TENANT_SCHEMAS_ENABLED=${TENANT_SCHEMAS_ENABLED:-true}
      - SHARED_SCHEMA_NAME=${SHARED_SCHEMA_NAME:-shared}

    volumes:
      - anthias-data:/data
      - static-files:/data/static
      - media-files:/data/media
      - backup-files:/data/backups
      - log-files:/data/logs
    networks:
      - signate-backend
      - signate-frontend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "manage.py", "health_check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # WebSocket Service for Real-time Communication
  anthias-websocket:
    build:
      context: ../project/backend
      dockerfile: docker/Dockerfile.websocket
      args:
        - DEBIAN_VERSION=${DEBIAN_VERSION:-bookworm}
        - PYTHON_VERSION=${PYTHON_VERSION:-3.11}
    image: signate/anthias-websocket:${IMAGE_TAG:-latest}
    container_name: signate-websocket
    hostname: signate-websocket
    environment:
      - HOME=/data
      - LISTEN=${LISTEN_HOST:-0.0.0.0}
      - PORT=9001
      - REDIS_URL=${REDIS_URL}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - anthias-data:/data
      - log-files:/data/logs
    networks:
      - signate-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9001"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Celery Worker for Background Tasks
  anthias-celery:
    build:
      context: ../project/backend
      dockerfile: docker/Dockerfile.celery
      args:
        - DEBIAN_VERSION=${DEBIAN_VERSION:-bookworm}
        - PYTHON_VERSION=${PYTHON_VERSION:-3.11}
    image: signate/anthias-celery:${IMAGE_TAG:-latest}
    container_name: signate-celery
    hostname: signate-celery
    environment:
      - HOME=/data
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-4}
      - CELERY_WORKER_MAX_TASKS_PER_CHILD=${CELERY_WORKER_MAX_TASKS_PER_CHILD:-1000}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=${DATABASE_URL}
      - DJANGO_SETTINGS_MODULE=anthias_app.settings.production
    volumes:
      - anthias-data:/data
      - media-files:/data/media
      - log-files:/data/logs
    networks:
      - signate-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      anthias-server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "inspect", "ping", "-A", "anthias_app"]
      interval: 60s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      replicas: 2

  # Celery Beat for Scheduled Tasks
  anthias-celery-beat:
    build:
      context: ../project/backend
      dockerfile: docker/Dockerfile.celery
      args:
        - DEBIAN_VERSION=${DEBIAN_VERSION:-bookworm}
        - PYTHON_VERSION=${PYTHON_VERSION:-3.11}
    image: signate/anthias-celery:${IMAGE_TAG:-latest}
    container_name: signate-celery-beat
    hostname: signate-celery-beat
    command: celery -A anthias_app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - HOME=/data
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=${DATABASE_URL}
      - DJANGO_SETTINGS_MODULE=anthias_app.settings.production
    volumes:
      - anthias-data:/data
      - log-files:/data/logs
    networks:
      - signate-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      anthias-server:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Next.js Frontend Application
  anthias-frontend:
    build:
      context: ../frontend
      dockerfile: docker/Dockerfile.production
      args:
        - NODE_VERSION=${NODE_VERSION:-22}
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
        - BUILD_DATE=${BUILD_DATE}
        - GIT_HASH=${GIT_HASH}
    image: signate/anthias-frontend:${IMAGE_TAG:-latest}
    container_name: signate-frontend
    hostname: signate-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    networks:
      - signate-frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Nginx Load Balancer and SSL Termination
  anthias-nginx:
    build:
      context: ../project/backend
      dockerfile: docker/Dockerfile.nginx
      args:
        - NGINX_VERSION=${NGINX_VERSION:-alpine}
    image: signate/anthias-nginx:${IMAGE_TAG:-latest}
    container_name: signate-nginx
    hostname: signate-nginx
    environment:
      - NGINX_HOST=${NGINX_HOST:-localhost}
      - NGINX_PORT=${NGINX_PORT:-80}
      - NGINX_SSL_PORT=${NGINX_SSL_PORT:-443}
      - SERVER_NAME=${SERVER_NAME}
      - SSL_CERT_PATH=${SSL_CERT_PATH:-/etc/ssl/certs}
      - SSL_KEY_PATH=${SSL_KEY_PATH:-/etc/ssl/private}
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - anthias-data:/data:ro
      - static-files:/data/static:ro
      - media-files:/data/media:ro
      - ssl-certs:/etc/ssl/certs:ro
      - ssl-private:/etc/ssl/private:ro
      - ./config/nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl.conf:/etc/nginx/conf.d/ssl.conf:ro
      - log-files:/var/log/nginx
    networks:
      - signate-frontend
    depends_on:
      - anthias-server
      - anthias-websocket
      - anthias-frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Let's Encrypt SSL Certificate Manager
  certbot:
    image: certbot/certbot:latest
    container_name: signate-certbot
    volumes:
      - ssl-certs:/etc/letsencrypt
      - ssl-private:/etc/letsencrypt
      - ./config/certbot:/etc/letsencrypt/renewal-hooks
    environment:
      - DOMAINS=${SSL_DOMAINS}
      - EMAIL=${SSL_EMAIL}
    command: >
      sh -c "
        if [ ! -f /etc/letsencrypt/live/${SERVER_NAME}/fullchain.pem ]; then
          certbot certonly --webroot --webroot-path=/var/www/certbot
          --email ${SSL_EMAIL} --agree-tos --no-eff-email
          -d ${SSL_DOMAINS};
        fi;
        trap exit TERM;
        while :; do
          certbot renew --quiet;
          sleep 12h & wait $${!};
        done;
      "
    networks:
      - signate-frontend
    depends_on:
      - anthias-nginx

  # Monitoring and Health Checks
  monitoring:
    image: prom/node-exporter:latest
    container_name: signate-monitoring
    hostname: signate-monitoring
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /:/host:ro,rslave
    networks:
      - signate-backend
    restart: unless-stopped
    ports:
      - "9100:9100"
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  # Backup Service
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: signate-backup
    hostname: signate-backup
    environment:
      - POSTGRES_URL=${DATABASE_URL}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
    volumes:
      - backup-files:/data/backups
      - postgres-data:/var/lib/postgresql/data:ro
      - media-files:/data/media:ro
    networks:
      - signate-backend
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

# Network Configuration for Production
networks:
  signate-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: ${FRONTEND_SUBNET:-172.20.0.0/16}
  signate-backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: ${BACKEND_SUBNET:-172.21.0.0/16}

# Persistent Volume Configuration for Production
volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_PATH:-./data/postgres}
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA_PATH:-./data/redis}
  anthias-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${ANTHIAS_DATA_PATH:-./data/anthias}
  static-files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${STATIC_FILES_PATH:-./data/static}
  media-files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MEDIA_FILES_PATH:-./data/media}
  backup-files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_FILES_PATH:-./data/backups}
  log-files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOG_FILES_PATH:-./data/logs}
  ssl-certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${SSL_CERTS_PATH:-./data/ssl/certs}
  ssl-private:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${SSL_PRIVATE_PATH:-./data/ssl/private}